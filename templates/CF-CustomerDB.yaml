---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template that creates the customer database environment'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: MyDatabase
    Description: MySQL database name
    Type: String
    MinLength: 1
    MaxLength:  64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password for MySQL database access
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  DBRootPassword:
    NoEcho: 'true'
    Description: Root password for MySQL
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Must contain only alphanumeric characters.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: m3.medium
    AllowedValues: m3.medium
    ConstraintDescription: Must be a valid EC2 instance type.
  SSHLocation:
    Description: "The IP address range that can be used to SSH to the EC2 instances"
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
          - Install
          - Configure
        Install:
          packages:
            yum:
              mysql        : []
              mysql-server : []
              mysql-libs   : []
        files: 
          /tmp/setup.mysql:
            content: !Sub | 
              CREATE DATABASE ${DBName};
              CREATE USER '${DBUsername}'@'localhost' IDENTIFIED BY '${DBPassword}';
              GRANT ALL ON ${DBName}.* TO '${DBUsername}'@'localhost';
              FLUSH PRIVILEGES;
            mode: "000644"
            owner: "root"
            group: "root"
          /etc/cfn/cfn-hup.conf:
            content: !Sub |
              [main]
              stack=${AWS::StackId}
              region=${AWS::Region
            mode: '000400'
            owner: root
            group: root
          /etc/cfn/hooks.d/cfn-auto-reloader.conf":
            content: !Sub |
              [cfn-auto-reloader-hook]
              triggers=post.update
              path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
              action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}
              runas=root
        service:
            sysvinit:
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        Configure:
          commands:
            01_set_mysql_root_password:
              command:
                !Sub |
                  mysqladmin -u root password ${DBRootPassword}
              test:
                !Sub |
                  ${DBName} -u root --password=${DBRootPassword} >/dev/null 2>&1 </dev/null); (( $? != 0 ))
            02_create_database:
              command:
                !Sub | 
                  mysql -u root --password=${DBRootPassword} < /tmp/setup.mysql
              test:
                !Sub |
                  mysql ${DBName} -u root --password=${DBRootPassword} >/dev/null 2>&1 </dev/null); (( $? != 0 ))
    Properties:
      ImageId: !Ref ImageId
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      KeyName:
        Ref: KeyName
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}
            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation

Outputs:
  WebsiteURL:
    Description: URL for newly created LAMP stack
    Value: !Sub |
      http://${EC2InstanceSecurityGroup} PublicDnsName
